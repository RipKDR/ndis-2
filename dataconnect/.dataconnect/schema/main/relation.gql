extend type ParticipantProfile {
  """
  ✨ List `ServiceAgreement` objects in a one-to-many relationship (where `ServiceAgreement`.`participantProfile` is this object).
  """
  serviceAgreements_on_participantProfile(
    """
    Filter condition to narrow down the query results.
    """
    where: ServiceAgreement_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ServiceAgreement_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ServiceAgreement_Having
  ): [ServiceAgreement!]! @fdc_generated(from: "ServiceAgreement.participantProfile", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ServiceRequest` objects in a one-to-many relationship (where `ServiceRequest`.`participantProfile` is this object).
  """
  serviceRequests_on_participantProfile(
    """
    Filter condition to narrow down the query results.
    """
    where: ServiceRequest_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ServiceRequest_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ServiceRequest_Having
  ): [ServiceRequest!]! @fdc_generated(from: "ServiceRequest.participantProfile", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ParticipantProfile", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table.
  """
  _count: Int! @fdc_generated(from: "ParticipantProfile.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `fundingAllocation` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  fundingAllocation_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.fundingAllocation", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `goals` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  goals_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.goals", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `ndisNumber` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  ndisNumber_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.ndisNumber", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `planManagerContact` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  planManagerContact_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.planManagerContact", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `supportNeeds` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  supportNeeds_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.supportNeeds", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ParticipantProfile` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ParticipantProfile.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `fundingAllocation` field in the `ParticipantProfile` table.
  """
  fundingAllocation_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ParticipantProfile.fundingAllocation", purpose: QUERY_SUM)
  """
  ✨ Average the `fundingAllocation` field in the `ParticipantProfile` table.
  """
  fundingAllocation_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ParticipantProfile.fundingAllocation", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `ParticipantProfile` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "ParticipantProfile.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `fundingAllocation` field in the `ParticipantProfile` table.
  """
  fundingAllocation_min: Float @fdc_generated(from: "ParticipantProfile.fundingAllocation", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `ParticipantProfile` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "ParticipantProfile.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `fundingAllocation` field in the `ParticipantProfile` table.
  """
  fundingAllocation_max: Float @fdc_generated(from: "ParticipantProfile.fundingAllocation", purpose: QUERY_MAX)
}
extend type Provider {
  """
  ✨ List `Service` objects in a one-to-many relationship (where `Service`.`provider` is this object).
  """
  services_on_provider(
    """
    Filter condition to narrow down the query results.
    """
    where: Service_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Service_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Service_Having
  ): [Service!]! @fdc_generated(from: "Service.provider", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ServiceAgreement` objects in a one-to-many relationship (where `ServiceAgreement`.`provider` is this object).
  """
  serviceAgreements_on_provider(
    """
    Filter condition to narrow down the query results.
    """
    where: ServiceAgreement_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ServiceAgreement_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ServiceAgreement_Having
  ): [ServiceAgreement!]! @fdc_generated(from: "ServiceAgreement.provider", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Provider", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Provider` table.
  """
  _count: Int! @fdc_generated(from: "Provider.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `ABN` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  ABN_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.ABN", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `address` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  address_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.address", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `adminUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  adminUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.adminUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `contactEmail` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contactEmail_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.contactEmail", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `contactPerson` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contactPerson_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.contactPerson", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `phoneNumber` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  phoneNumber_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.phoneNumber", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `servicesOffered` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  servicesOffered_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.servicesOffered", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Provider` table where the `website` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  website_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Provider.website", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Provider` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Provider.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Provider` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Provider.createdAt", purpose: QUERY_MAX)
}
extend type Service {
  """
  ✨ List `ServiceRequest` objects in a one-to-many relationship (where `ServiceRequest`.`service` is this object).
  """
  serviceRequests_on_service(
    """
    Filter condition to narrow down the query results.
    """
    where: ServiceRequest_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ServiceRequest_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ServiceRequest_Having
  ): [ServiceRequest!]! @fdc_generated(from: "ServiceRequest.service", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Service", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Service` table.
  """
  _count: Int! @fdc_generated(from: "Service.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `category` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  category_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.category", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `costPerUnit` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  costPerUnit_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.costPerUnit", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `imageUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.imageUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `providerId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  providerId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.providerId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `supportWorkerProfileId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  supportWorkerProfileId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.supportWorkerProfileId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Service` table where the `unitOfMeasure` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  unitOfMeasure_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Service.unitOfMeasure", purpose: QUERY_COUNT)
  """
  ✨ Sum the `costPerUnit` field in the `Service` table.
  """
  costPerUnit_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Service.costPerUnit", purpose: QUERY_SUM)
  """
  ✨ Average the `costPerUnit` field in the `Service` table.
  """
  costPerUnit_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Service.costPerUnit", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `costPerUnit` field in the `Service` table.
  """
  costPerUnit_min: Float @fdc_generated(from: "Service.costPerUnit", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `Service` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Service.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `costPerUnit` field in the `Service` table.
  """
  costPerUnit_max: Float @fdc_generated(from: "Service.costPerUnit", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `Service` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Service.createdAt", purpose: QUERY_MAX)
}
extend type ServiceAgreement {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ServiceAgreement", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table.
  """
  _count: Int! @fdc_generated(from: "ServiceAgreement.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `agreedServices` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  agreedServices_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.agreedServices", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `endDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.endDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `participantProfileId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  participantProfileId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.participantProfileId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `providerId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  providerId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.providerId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `startDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.startDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `supportWorkerProfileId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  supportWorkerProfileId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.supportWorkerProfileId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `termsAndConditions` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  termsAndConditions_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.termsAndConditions", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceAgreement` table where the `totalBudget` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalBudget_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceAgreement.totalBudget", purpose: QUERY_COUNT)
  """
  ✨ Sum the `totalBudget` field in the `ServiceAgreement` table.
  """
  totalBudget_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ServiceAgreement.totalBudget", purpose: QUERY_SUM)
  """
  ✨ Average the `totalBudget` field in the `ServiceAgreement` table.
  """
  totalBudget_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ServiceAgreement.totalBudget", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `ServiceAgreement` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "ServiceAgreement.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endDate` field in the `ServiceAgreement` table.
  """
  endDate_min: Date @fdc_generated(from: "ServiceAgreement.endDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startDate` field in the `ServiceAgreement` table.
  """
  startDate_min: Date @fdc_generated(from: "ServiceAgreement.startDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalBudget` field in the `ServiceAgreement` table.
  """
  totalBudget_min: Float @fdc_generated(from: "ServiceAgreement.totalBudget", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `ServiceAgreement` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "ServiceAgreement.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endDate` field in the `ServiceAgreement` table.
  """
  endDate_max: Date @fdc_generated(from: "ServiceAgreement.endDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startDate` field in the `ServiceAgreement` table.
  """
  startDate_max: Date @fdc_generated(from: "ServiceAgreement.startDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalBudget` field in the `ServiceAgreement` table.
  """
  totalBudget_max: Float @fdc_generated(from: "ServiceAgreement.totalBudget", purpose: QUERY_MAX)
}
extend type ServiceRequest {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ServiceRequest", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ServiceRequest` table.
  """
  _count: Int! @fdc_generated(from: "ServiceRequest.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `endTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.endTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `location` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  location_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.location", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `notes` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  notes_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.notes", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `participantProfileId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  participantProfileId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.participantProfileId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `requestedDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  requestedDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.requestedDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `serviceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  serviceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.serviceId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `startTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.startTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ServiceRequest` table where the `supportWorkerProfileId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  supportWorkerProfileId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ServiceRequest.supportWorkerProfileId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `ServiceRequest` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "ServiceRequest.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `requestedDate` field in the `ServiceRequest` table.
  """
  requestedDate_min: Date @fdc_generated(from: "ServiceRequest.requestedDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `ServiceRequest` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "ServiceRequest.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `requestedDate` field in the `ServiceRequest` table.
  """
  requestedDate_max: Date @fdc_generated(from: "ServiceRequest.requestedDate", purpose: QUERY_MAX)
}
extend type SupportWorkerProfile {
  """
  ✨ List `Service` objects in a one-to-many relationship (where `Service`.`supportWorkerProfile` is this object).
  """
  services_on_supportWorkerProfile(
    """
    Filter condition to narrow down the query results.
    """
    where: Service_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Service_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Service_Having
  ): [Service!]! @fdc_generated(from: "Service.supportWorkerProfile", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ServiceAgreement` objects in a one-to-many relationship (where `ServiceAgreement`.`supportWorkerProfile` is this object).
  """
  serviceAgreements_on_supportWorkerProfile(
    """
    Filter condition to narrow down the query results.
    """
    where: ServiceAgreement_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ServiceAgreement_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ServiceAgreement_Having
  ): [ServiceAgreement!]! @fdc_generated(from: "ServiceAgreement.supportWorkerProfile", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ServiceRequest` objects in a one-to-many relationship (where `ServiceRequest`.`supportWorkerProfile` is this object).
  """
  serviceRequests_on_supportWorkerProfile(
    """
    Filter condition to narrow down the query results.
    """
    where: ServiceRequest_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ServiceRequest_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ServiceRequest_Having
  ): [ServiceRequest!]! @fdc_generated(from: "ServiceRequest.supportWorkerProfile", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "SupportWorkerProfile", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table.
  """
  _count: Int! @fdc_generated(from: "SupportWorkerProfile.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `abn` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  abn_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.abn", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `availability` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  availability_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.availability", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `experience` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  experience_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.experience", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `firstAidCertificate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  firstAidCertificate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.firstAidCertificate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `hourlyRate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  hourlyRate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.hourlyRate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `policeCheckStatus` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  policeCheckStatus_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.policeCheckStatus", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `qualifications` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  qualifications_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.qualifications", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `servicesOffered` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  servicesOffered_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.servicesOffered", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SupportWorkerProfile` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SupportWorkerProfile.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `hourlyRate` field in the `SupportWorkerProfile` table.
  """
  hourlyRate_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "SupportWorkerProfile.hourlyRate", purpose: QUERY_SUM)
  """
  ✨ Average the `hourlyRate` field in the `SupportWorkerProfile` table.
  """
  hourlyRate_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "SupportWorkerProfile.hourlyRate", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `SupportWorkerProfile` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "SupportWorkerProfile.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `hourlyRate` field in the `SupportWorkerProfile` table.
  """
  hourlyRate_min: Float @fdc_generated(from: "SupportWorkerProfile.hourlyRate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `SupportWorkerProfile` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "SupportWorkerProfile.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `hourlyRate` field in the `SupportWorkerProfile` table.
  """
  hourlyRate_max: Float @fdc_generated(from: "SupportWorkerProfile.hourlyRate", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `ParticipantProfile` objects in a one-to-many relationship (where `ParticipantProfile`.`user` is this object).
  """
  participantProfiles_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: ParticipantProfile_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ParticipantProfile_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ParticipantProfile_Having
  ): [ParticipantProfile!]! @fdc_generated(from: "ParticipantProfile.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Provider` objects in a one-to-many relationship (where `Provider`.`adminUser` is this object).
  """
  providers_on_adminUser(
    """
    Filter condition to narrow down the query results.
    """
    where: Provider_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Provider_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Provider_Having
  ): [Provider!]! @fdc_generated(from: "Provider.adminUser", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `SupportWorkerProfile` objects in a one-to-many relationship (where `SupportWorkerProfile`.`user` is this object).
  """
  supportWorkerProfiles_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: SupportWorkerProfile_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SupportWorkerProfile_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: SupportWorkerProfile_Having
  ): [SupportWorkerProfile!]! @fdc_generated(from: "SupportWorkerProfile.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `address` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  address_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.address", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `firstName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  firstName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.firstName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `lastName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.lastName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `phoneNumber` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  phoneNumber_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.phoneNumber", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `userType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.userType", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
}
