rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() { 
      return request.auth != null; 
    }
    
    function isOwner(uid) { 
      return isSignedIn() && request.auth.uid == uid; 
    }
    
    function isValidUser() {
      return isSignedIn() && 
             request.auth.token.email_verified == true;
    }
    
    function isParticipant() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'participant';
    }
    
    function isProvider() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
    }
    
    function isValidTimestamp() {
      return request.time > timestamp.date(2024, 1, 1);
    }

    // Users profile - Enhanced security
    match /users/{uid} {
      allow read, write: if isOwner(uid) && isValidTimestamp();
      allow read: if isProvider() && isValidTimestamp(); // Providers can read participant profiles
    }

    // Schedules events - Enhanced with validation
    match /schedules/{uid}/events/{eventId} {
      allow read, write: if isOwner(uid) && isValidTimestamp();
      allow read: if isProvider() && isValidTimestamp(); // Providers can read participant schedules
      
      // Validate event data
      allow create: if isOwner(uid) && 
                       isValidTimestamp() &&
                       request.resource.data.keys().hasAll(['title', 'start', 'end', 'ownerUid']) &&
                       request.resource.data.ownerUid == uid;
    }

    // Plans budgets by year - Enhanced security
    match /plans/{uid}/years/{year} {
      allow read, write: if isOwner(uid) && isValidTimestamp();
      allow read: if isProvider() && isValidTimestamp(); // Providers can read participant budgets
      
      // Validate budget data
      allow create, update: if isOwner(uid) && 
                               isValidTimestamp() &&
                               request.resource.data.keys().hasAll(['core', 'capacity', 'capital']) &&
                               request.resource.data.core is number &&
                               request.resource.data.capacity is number &&
                               request.resource.data.capital is number;
    }

    // Tasks - New collection for task management
    match /tasks/{uid}/items/{taskId} {
      allow read, write: if isOwner(uid) && isValidTimestamp();
      allow read: if isProvider() && isValidTimestamp();
      
      // Validate task data
      allow create: if isOwner(uid) && 
                       isValidTimestamp() &&
                       request.resource.data.keys().hasAll(['title', 'status', 'createdAt']) &&
                       request.resource.data.status in ['pending', 'in_progress', 'completed'];
    }

    // Feedback - Enhanced with rate limiting
    match /feedback/{uid}/items/{fid} {
      allow create: if isOwner(uid) && 
                       isValidTimestamp() &&
                       request.resource.data.keys().hasAll(['message', 'timestamp']) &&
                       request.resource.data.message.size() > 0 &&
                       request.resource.data.message.size() < 1000;
      allow read: if isOwner(uid) && isValidTimestamp();
      allow update, delete: if false; // feedback is append-only
    }

    // Points - Enhanced with validation
    match /points/{uid} {
      allow read: if isOwner(uid) && isValidTimestamp();
      allow write: if isOwner(uid) && 
                      isValidTimestamp() &&
                      request.resource.data.points is number &&
                      request.resource.data.points >= 0;
    }

    // Service providers - Public read access
    match /providers/{providerId} {
      allow read: if isValidTimestamp();
      allow write: if isProvider() && isValidTimestamp();
    }

    // Messages/Support - New collection for support
    match /messages/{threadId}/messages/{messageId} {
      allow read, write: if isSignedIn() && 
                            isValidTimestamp() &&
                            request.auth.uid in resource.data.participants;
    }

    // Analytics events - Write-only for users
    match /analytics/{uid}/events/{eventId} {
      allow write: if isOwner(uid) && isValidTimestamp();
      allow read: if false; // Analytics data is write-only for users
    }
  }
}

